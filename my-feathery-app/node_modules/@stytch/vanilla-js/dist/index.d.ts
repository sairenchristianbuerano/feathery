import { StytchHeadlessClient } from './index.headless.js';
import { StytchProjectConfigurationInput, StytchLoginConfig, StyleConfig, Callbacks } from '@stytch/core/public';
export * from '@stytch/core/public';
import '@stytch/core';
import './OneTapClient-zVI7LxJ6.js';
import 'google-one-tap';

/**
 * A client used for invoking the Stytch API an.
 * The Stytch UI Client can be used as a drop-in solution for authentication and session management.
 * The Stytch UI client also can be used to render various UI elements for managing users.
 * Full documentation can be found {@link https://stytch.com/docs/sdks/javascript-sdk online.}
 * @example
 * const stytch = new StytchUIClient('public-token-<find yours in the stytch dashboard>');
 * stytch.magicLinks.email.loginOrCreate('sandbox@stytch.com', {
 *   login_magic_link_url: 'https://example.com/authenticate',
 *   login_expiration_minutes: 60,
 *   signup_magic_link_url: 'https://example.com/authenticate',
 *   signup_expiration_minutes: 60,
 * });
 */
declare class StytchUIClient<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> extends StytchHeadlessClient<TProjectConfiguration> {
    constructor(...args: ConstructorParameters<typeof StytchHeadlessClient<TProjectConfiguration>>);
    /**
     * Mounts a login screen inside the element provided.
     * If a login screen has already been rendered inside the element,
     * it will be updated to use the new config, style, and callback options passed in.
     * @example
     * stytchClient.mountLogin({
     *   elementId: '#login-container',
     *   config: {...}
     * });
     *
     * @param elementId - A string containing the id of the element that should contain the login screen.
     * @param config - A {@link StytchLoginConfig} object containing the products that should be registered
     * @param styles - A {@link StyleConfig} object containing custom styling info
     * @param callbacks - Optional {@link Callbacks} triggered by various events in the Stytch SDK.
     * @throws An error when the element specified by elementId cannot be found.
     */
    mountLogin({ elementId, config, styles, callbacks, }: {
        elementId: string;
        config: StytchLoginConfig;
        styles?: StyleConfig;
        callbacks?: Callbacks<TProjectConfiguration>;
    }): void;
    /**
     * Mounts a reset password screen inside the element provided.
     * If a reset password screen has already been rendered inside the element,
     * it will be updated to use the new config, style, and callback options passed in.
     * @example
     * stytchClient.mountResetPassword({
     *   elementId: '#login-container',
     *   config: {...}
     * });
     *
     * @param elementId - A string containing the id of the element that should contain the login screen.
     * @param config - A {@link StytchLoginConfig} object containing the products that should be registered
     * @param styles - A {@link StyleConfig} object containing custom styling info
     * @param callbacks - Optional {@link Callbacks} triggered by various events in the Stytch SDK.
     * @throws An error when the element specified by elementId cannot be found.
     */
    mountResetPassword({ elementId, config, styles, callbacks, passwordResetToken, }: {
        elementId: string;
        config: StytchLoginConfig;
        styles?: StyleConfig;
        callbacks?: Callbacks<TProjectConfiguration>;
        passwordResetToken: string;
    }): void;
    /**
     * Mounts a Passkey registration screen inside the element provided.
     * If a passkey registration screen has already been rendered inside the element,
     * it will be updated to use the new config, style, and callback options passed in.
     * @example
     * stytchClient.mountPasskeyRegistration({
     *   elementId: '#login-container',
     *   config: {...}
     * });
     *
     * @param elementId - A string containing the id of the element that should contain the login screen.
     * @param config - A {@link StytchLoginConfig} object containing the products that should be registered
     * @param styles - A {@link StyleConfig} object containing custom styling info
     * @param callbacks - Optional {@link Callbacks} triggered by various events in the Stytch SDK.
     * @throws An error when the element specified by elementId cannot be found.
     */
    mountPasskeyRegistration({ elementId, config, styles, callbacks, }: {
        elementId: string;
        config: StytchLoginConfig;
        styles?: StyleConfig;
        callbacks?: Callbacks<TProjectConfiguration>;
    }): void;
    /**
     * Mounts an IDP Consent screen inside the element provided.
     * Parses OAuth Authorization params (client_id, scope, nonce, etc.) out of the page URL.
     * Requires the user to be logged in.
     * @example
     * stytchClient.mountIdentityProvider({
     *   elementId: '#idp-container',
     *   config: {...}
     * });
     *
     * @param elementId - A string containing the id of the element that should contain the login screen.
     * @param styles - A {@link StyleConfig} object containing custom styling info
     * @param callbacks - Optional {@link Callbacks} triggered by various events in the Stytch SDK.
     * @throws An error when the element specified by elementId cannot be found.
     */
    mountIdentityProvider({ elementId, styles, callbacks, }: {
        elementId: string;
        styles?: StyleConfig;
        callbacks?: Callbacks<TProjectConfiguration>;
    }): void;
}

export { StytchUIClient };
