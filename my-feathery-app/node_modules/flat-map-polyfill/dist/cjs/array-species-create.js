'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = arraySpeciesCreate;
/**
 * @template T
 * @param {T[]} originalArray
 * @param {number} length
 * @returns {T[]}
 */
function arraySpeciesCreate(originalArray, length) {
  var isArray = Array.isArray(originalArray);
  if (!isArray) {
    return Array(length);
  }
  /**
   * @type {ArrayConstructor|undefined|null} C
   */
  var C = Object.getPrototypeOf(originalArray).constructor;
  if (C) {
    // If IsConstructor(C) is true... not sure how this can be reliably checked without invoking it. Likely not insignificant.
    if ((typeof C === 'undefined' ? 'undefined' : _typeof(C)) === 'object' || typeof C === 'function') {
      C = C[Symbol.species.toString()];
      C = C !== null ? C : undefined;
    }
    if (C === undefined) {
      return Array(length);
    }
    if (typeof C !== 'function') {
      throw TypeError('invalid constructor');
    }
    /** @type {Array} */
    var result = new C(length);
    return result;
  }
}
//# sourceMappingURL=array-species-create.js.map