import React, { ReactNode } from 'react';
import { FieldValues } from '../utils/init';
import { ContextOnAction, ContextOnChange, ContextOnError, ContextOnSubmit, ContextOnView, ElementProps, FormContext, PopupOptions } from '../types/Form';
import { InitialLoader } from '../hooks/useLoader';
export * from './grid/StyledContainer';
export type { StyledContainerProps } from './grid/StyledContainer';
export interface Props {
    formId: string;
    /**
     * @deprecated use formId instead
     */
    formName?: string;
    onChange?: null | ((context: ContextOnChange) => Promise<any> | void);
    onLoad?: null | ((context: FormContext) => Promise<any> | void);
    onFormLoad?: null | ((context: FormContext) => Promise<any> | void);
    onFormComplete?: null | ((context: FormContext) => Promise<any> | void);
    onSubmit?: null | ((context: ContextOnSubmit) => Promise<any> | void);
    onError?: null | ((context: ContextOnError) => Promise<any> | void);
    onView?: null | ((context: ContextOnView) => Promise<any> | void);
    onAction?: null | ((context: ContextOnAction) => Promise<any> | void);
    onViewElements?: string[];
    saveUrlParams?: boolean;
    initialValues?: FieldValues;
    initialStepId?: string;
    hideTestUI?: boolean;
    language?: string;
    initialLoader?: InitialLoader;
    popupOptions?: PopupOptions;
    elementProps?: ElementProps;
    contextRef?: React.MutableRefObject<null | FormContext>;
    formProps?: Record<string, any>;
    customComponents?: Record<string, any>;
    style?: {
        [cssProperty: string]: string;
    };
    className?: string;
    children?: ReactNode;
    _draft?: boolean;
    readOnly?: boolean;
    hashNavigation?: boolean;
}
interface InternalProps {
    _internalId: string;
    _isAuthLoading?: boolean;
    _bypassCDN?: boolean;
    _pollFuserData?: boolean;
}
export interface ClickActionElement {
    id: string;
    properties: {
        [key: string]: any;
    };
    repeat?: any;
}
export interface LogicRule {
    id: string;
    name: string;
    trigger_event: string;
    steps: string[];
    elements: string[];
    code: string;
    enabled: boolean;
    valid: boolean;
}
export declare function JSForm({ formId, formName, _internalId, _isAuthLoading, ...props }: Props & InternalProps): import("@emotion/react/jsx-runtime").JSX.Element | null;
export default function ReactForm(props: Props): import("@emotion/react/jsx-runtime").JSX.Element;
//# sourceMappingURL=index.d.ts.map