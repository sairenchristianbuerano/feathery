import { ACTION_AI_EXTRACTION } from '../../../utils/elementActions';
export interface AIExtractionAction {
    type: typeof ACTION_AI_EXTRACTION;
    extraction_id: string;
    variant_id?: string;
    run_async?: boolean;
    run_sequential?: boolean;
    meeting_url_field_key?: string;
}
export interface OtherAction {
    type: string;
    [key: string]: any;
}
interface FileSource {
    id: string;
    url: string;
    path: string;
}
export declare type DataItem = {
    status: 'complete' | 'incomplete' | 'error' | 'queued';
    extractionKey?: string;
    extractionVariantKey?: string | null;
    children?: DataItem[];
    id: string;
    variantId: string;
    runId?: string;
    createdAt?: string;
    fileSources?: FileSource[];
    runs?: string[];
};
interface ParentRun {
    extraction_key: string;
    extraction_variant_key: string | null;
    run_id: string;
    created_at: string;
    file_sources: FileSource[];
}
declare type ChildRun = {
    extraction_key: string;
    extraction_variant_key: string | null;
    run_id: string;
    created_at: string;
    file_sources: FileSource[];
    status: 'complete' | 'incomplete';
    error: string | null;
};
interface PollDataSuccess {
    status: 'complete' | 'incomplete';
    data: Record<string, any>;
    runs: string[];
    parent_runs: ParentRun[];
    child_runs: ChildRun[];
}
declare type PollData = PollDataSuccess | {
    error: string;
};
export declare const useAIExtractionToast: () => {
    currentActionExtractions: DataItem[];
    initializeActionExtractions: (actions: Array<AIExtractionAction | OtherAction>) => void;
    updateExtractionInAction: (extractionId: string, variantId: string, updates: Partial<DataItem>) => void;
    clearActionExtractions: () => void;
    handleExtractionStatusUpdate: (extractionId: string, variantId: string, pollData: PollData, addIfMissing?: boolean) => void;
};
export {};
//# sourceMappingURL=useAIExtractionToast.d.ts.map