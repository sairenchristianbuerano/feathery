/**
 * Returns the type of the element that is being passed.
 * @param element - Element data
 * @returns {string | null}
 */
export declare const getElementType: (element: any) => any;
export declare const isFillContainer: (div: HTMLDivElement) => boolean;
export declare const isFitContainer: (div: HTMLDivElement) => boolean;
export declare const isFitElement: (div: HTMLDivElement) => boolean;
export declare const getFieldValue: (obj: any, key: string, prefix?: string) => any;
export declare const getStyle: (node: any, key: string, prefix?: string) => any;
export declare const getStylePxValue: (style: any) => number;
/**
 * Returns the total pixel width of the provided div. The pixel width will
 * prioritize max-width if it's set and include the margin left + right.
 * @param div - Div to get the total pixel width of
 * @returns {number} - Total pixel width of the div
 */
export declare const getTotalPxWidth: (div: any) => number;
export declare const getImmediateDivs: (el: any) => any[];
/**
 * getRawNode
 * Returns the raw data of a node if necessary. `node.uuid` indicates that the node
 * is passed from the editor which means it needs to return `node.renderData`.
 */
export declare const getRawNode: (node: any) => any;
/**
 * hasDescendantFitNodes
 * Returns a boolean indicating whether the ref has descendant elements
 * that are Fit-width containers or elements.
 */
export declare const hasDescendantFitNodes: (ref: any) => boolean;
/**
 * getParentFitContainers
 * Returns parent divs that are either a Fit-width container or element along
 * with utility functions for these divs.
 */
export declare const getParentFitContainers: (ref: any) => {
    parents: any[];
    expand: () => void;
    collapse: () => void;
} | null;
export declare const resizeFitContainer: (div: any) => void;
export declare const whichTransitionEvent: () => any;
//# sourceMappingURL=utils.d.ts.map