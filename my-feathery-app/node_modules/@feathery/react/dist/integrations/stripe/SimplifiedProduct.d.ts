import { Price, Product as StripeProductProductCacheItem, StripeConfig } from './stripe';
export default class SimplifiedProduct {
    _id: string;
    _productPriceCacheItem: StripeProductProductCacheItem;
    _defaultPrice: Price | undefined;
    _mode: 'live' | 'test';
    _updateFieldValues: any;
    _stripeConfig: StripeConfig;
    _client: any;
    constructor(id: string, productPriceCacheItem: StripeProductProductCacheItem, mode: 'live' | 'test', updateFieldValues: any, stripeConfig: StripeConfig, client: any);
    get id(): string;
    get name(): string;
    get description(): string;
    get active(): boolean;
    get price(): string;
    get price_formatted(): string;
    get currency(): string;
    get subscription_interval(): string;
    get pricing_type(): string;
    get recurring_billing_type(): string;
    get mode(): string;
    getCartQuantity(): number;
    get cart_quantity(): string;
    get cart_subtotal(): string;
    get cart_subtotal_formatted(): string;
    /**
     * Add this product to the cart
     * @param quantity
     * @param replace
     * @returns
     */
    addToCart(quantity: number, replace?: boolean): {
        [x: string]: number;
    };
    removeFromCart(): {
        [x: string]: number;
    };
}
export declare function getDefaultPrice(productPriceCacheItem: StripeProductProductCacheItem): Price | undefined;
//# sourceMappingURL=SimplifiedProduct.d.ts.map