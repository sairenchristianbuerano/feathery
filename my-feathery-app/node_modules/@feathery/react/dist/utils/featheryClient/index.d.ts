import IntegrationClient from './integrationClient';
import { DebouncedFunc } from 'lodash';
import { ExtractionActionOptions, GetConfigParams } from '../internalState';
export declare const API_URL_OPTIONS: {
    local: string;
    staging: string;
    production: string;
    productionAU: string;
    productionEU: string;
    productionCA: string;
};
export declare let API_URL: string;
export declare let CDN_URL: string;
export declare let STATIC_URL: string;
export declare let S3_URL: string;
export declare const updateRegionApiUrls: (region: string) => void;
export default class FeatheryClient extends IntegrationClient {
    /**
     * Used to aggregate field value updates for successive calls to
     * submitCustom within the debounce window
     */
    pendingCustomFieldUpdates: {
        [key: string]: any;
    };
    /**
     * Debounced implementation of submitCustom
     */
    debouncedSubmitCustom: DebouncedFunc<(override: boolean) => Promise<void>>;
    customSubmitInFlight: Record<string, any>;
    constructor(formKey?: string, ignoreNetworkErrors?: any, draft?: boolean, bypassCDN?: boolean);
    _submitJSONData(servars: any, stepKey: string, noComplete: boolean): Promise<void>;
    _getFileValue(servar: any): Promise<any>;
    _submitFileData(servar: any, stepKey: string): Promise<void>;
    updateUserId(newUserId: string, merge?: boolean): Promise<void | Response>;
    pollUserData(): Promise<void | Response>;
    setDefaultFormValues({ steps, additionalValues }: any): void;
    _loadFormPackages(res: any): void;
    fetchCacheForm(formLanguage?: string): Promise<any>;
    fetchForm(initVals: any, language?: string): Promise<any>;
    fetchSession(formPromise?: null, block?: boolean): Promise<any[]>;
    submitAuthInfo({ authId, authData, isStytchTemplateKey }: any): Promise<any>;
    /**
     * Debounceable function responsible for pinging `/api/panel/custom/submit/<version>`
     */
    _debouncedSubmitCustom(override: boolean): Promise<void>;
    /**
     * If there is a pending invocation of submitCustom, this method calls it immediately
     */
    flushCustomFields(override?: boolean): Promise<void | undefined>;
    /**
     * `beforeunload` event handler that flushes the pending submit custom changes
     * when a user is attempting to exit the page.
     * Defined via an arrow function so that event handler has a consistent reference
     * when adding and removing the listener
     * @param event `BeforeUnloadEvent`
     * @returns
     */
    _flushCustomFieldsBeforeUnload: (event: BeforeUnloadEvent) => string;
    _removeCustomFieldListener(): void;
    _addCustomFieldListener(): void;
    getNoSave(): boolean;
    submitCustom(customKeyValues: {
        [key: string]: any;
    }, { override, shouldFlush }?: {
        override?: boolean;
        shouldFlush?: boolean;
    }): Promise<void>;
    submitStep(servars: any, step: any, hasNext: boolean): Promise<any>;
    registerEvent(eventData: any): Promise<any>;
    runCustomRequest(payload: {
        name?: string;
        method?: string;
        url?: string;
        data: Record<string, any> | any[];
        headers: Record<string, string>;
    }, fieldValues?: {
        [key: string]: any;
    } | null): Promise<any>;
    AI_CHECK_INTERVAL: number;
    AI_MAX_TIME: number;
    runAIExtraction({ extractionId, options, pages, setPollFuserData, onStatusUpdate }: {
        extractionId: string;
        options: ExtractionActionOptions | boolean;
        pages?: number[];
        setPollFuserData?: any;
        onStatusUpdate?: any;
    }): Promise<unknown>;
    getConfig(configParams: GetConfigParams): Promise<any>;
    verifyCollaborator(email: string): Promise<any>;
    inviteCollaborator(usersGroups: string[], templateId: string): Promise<any>;
    rewindCollaboration(templateId: string, rewindEmailKey: string): Promise<any>;
    setCollaboratorAsCompleted(templateId: string): Promise<any>;
    generateDocuments({ documentIds, download }: {
        documentIds: string[];
        download?: boolean;
    }): Promise<{
        files: any;
    } | undefined>;
}
//# sourceMappingURL=index.d.ts.map