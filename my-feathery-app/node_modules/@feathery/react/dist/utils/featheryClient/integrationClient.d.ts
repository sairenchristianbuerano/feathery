import { OfflineRequestHandler } from '../offlineRequestHandler';
import { AlloyEntities, IntegrationActionIds, IntegrationActionOptions, LoanProCustomerObject } from '../internalState';
export declare const TYPE_MESSAGES_TO_IGNORE: string[];
export default class IntegrationClient {
    formKey: string;
    version?: string;
    _noSave?: boolean;
    ignoreNetworkErrors: any;
    draft: boolean;
    bypassCDN: boolean;
    submitQueue: Promise<any>;
    eventQueue: Promise<any>;
    offlineRequestHandler: OfflineRequestHandler;
    showNetworkErrorAlert: boolean;
    constructor(formKey?: string, ignoreNetworkErrors?: any, draft?: boolean, bypassCDN?: boolean);
    errorCallback(): void;
    _fetch(url: any, options?: any, parseResponse?: boolean, propagateNetworkErrors?: boolean): Promise<void | Response>;
    fetchPlaidLinkToken(kwargs: Record<string, any>): Promise<{
        token: any;
        err?: undefined;
    } | {
        err: any;
        token?: undefined;
    }>;
    fetchPlaidVerificationStatus(sessionId: string): Promise<any>;
    submitPlaidUserData(publicToken: string): Promise<any>;
    fetchArgyleUserToken(): Promise<any>;
    triggerFlinksIframeAuthorization(): Promise<void | Response>;
    triggerFlinksLoginId(accountId: string, token: string, loginId?: string): Promise<void | Response>;
    addressSearchResults(searchTerm: any, country: any, city: boolean): Promise<any>;
    addressDetail(addressId: any): Promise<any>;
    verifyRecaptchaToken(token: string): Promise<any>;
    setupPaymentIntent(paymentMethodFieldId: any): Promise<any>;
    retrievePaymentMethodData(paymentMethodFieldId: any, stripePaymentMethodId: any): Promise<any>;
    _payment(method: 'POST' | 'PUT', extraParams?: {}): Promise<any>;
    createPayment(): Promise<any>;
    createCheckoutSession(successUrl: string, cancelUrl?: string): Promise<any>;
    sendEmailOTP(receiverEmail: string): Promise<any>;
    sendSMSMessage(phoneNumber: string, message: any): Promise<any>;
    verifyOTP(otp: string, type: string): Promise<any>;
    generateEnvelopes(action: Record<string, string>): Promise<any>;
    QUIK_CHECK_INTERVAL: number;
    QUIK_MAX_TIME: number;
    generateQuikEnvelopes(action: Record<string, string>): Promise<unknown>;
    getQuikForms({ dealerNames }: {
        dealerNames: string[];
    }): Promise<any>;
    getQuikFormRoles({ formIds }: {
        formIds: number[];
    }): Promise<any>;
    PERSONA_CHECK_INTERVAL: number;
    PERSONA_MAX_TIME: number;
    pollPersonaResponse(): Promise<unknown>;
    telesignSilentVerification(phoneNumber: string): Promise<any>;
    telesignPhoneType(phoneNumber: string): Promise<any>;
    telesignSendOTP(phoneNumber: string, mode?: 'voice' | 'sms'): Promise<void>;
    telesignVerifyOTP(otp: string): Promise<any>;
    sendEmail(templateId: string): Promise<void>;
    alloyJourneyApplication(journeyToken: string, entities: AlloyEntities): Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: string;
        payload?: undefined;
    }>;
    createLoanProCustomerWithAuthorizedEmail(bodyParams: LoanProCustomerObject): Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: any;
        payload?: undefined;
    }>;
    searchLoanProCustomerByAuthorizedEmail(): Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: any;
        payload?: undefined;
    }>;
    schwabCreateContact(): Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: string;
        payload?: undefined;
    }>;
    customRolloutAction(automationIds: IntegrationActionIds, options: IntegrationActionOptions): Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: string;
        payload?: undefined;
    }>;
    fetchSalesforcePicklistOptions(objectName: string, fieldName: string, credentialKey: string): Promise<any>;
}
//# sourceMappingURL=integrationClient.d.ts.map