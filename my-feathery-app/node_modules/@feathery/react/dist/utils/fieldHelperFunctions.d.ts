import Field from './entities/Field';
import FeatheryClient from './featheryClient';
export declare const ARRAY_FIELD_TYPES: string[];
export declare function isValidFieldIdentifier(str: string): boolean;
export declare function getDefaultFieldValue(field: any): any;
export declare function getDefaultFormFieldValue(field: any): any;
export declare type OptionType = string | {
    value: string;
    label?: string;
    image?: string;
};
export declare type FieldOptions = Record<string, OptionType[] | null>;
export declare function updateStepFieldOptions(step: any, newOptions: FieldOptions, repeatIndex?: number): void;
export declare type FieldStyles = Record<string, any>;
export declare function updateStepFieldStyles(step: any, fieldKey: string, newStyles: FieldStyles): void;
export declare type FieldProperties = Record<string, any>;
export declare function updateStepFieldProperties(step: any, fieldKey: string, newProperties: Record<string, any>, onServar?: boolean): void;
/**
 *
 * @param {*} step
 * @param {*} visiblePositions
 * @param {boolean} forUser indicate whether the result of this function is
 * meant for the user, or Feathery's BE. Presently the only difference is
 * whether signature field values are base64 or a JS File obj
 * visible to user as determined by the hide if rules
 * @returns Formatted fields for the step
 */
export declare const formatStepFields: (step: any, visiblePositions: any, forUser: boolean) => Record<string, {
    value: any;
    type: string;
    displayText: string;
    options?: any[] | undefined;
    position: number[];
}>;
export declare const formatAllFormFields: (steps: any, forUser?: boolean) => {};
export declare const getAllFields: (fieldKeys: string[], hiddenFieldKeys: string[], formUuid: string) => Record<string, Field>;
/**
 * Retrieves the value of the servar from the provided values.
 * If the servar field is repeated, gets the indexed value.
 */
export declare function getFieldValue(field: any): {
    value: any;
    repeated?: undefined;
    index?: undefined;
    valueList?: undefined;
} | {
    repeated: boolean;
    index: any;
    value: any;
    valueList: any[];
} | {
    repeated: boolean;
    value: any;
    index?: undefined;
    valueList?: undefined;
};
export declare function castServarVal(servarType: string | undefined, val: any, repeated?: boolean): any;
export declare function castHiddenVal(hfType: string, val: any): string | number;
export declare function getServarAttrMap(steps: any): Record<string, {
    type: string;
    repeated: boolean;
}>;
export declare function saveInitialValuesAndUrlParams({ updateFieldValues, client, saveUrlParams, initialValues, steps, hiddenFields }: {
    updateFieldValues: any;
    client: FeatheryClient;
    saveUrlParams: boolean;
    initialValues: any;
    steps: any;
    hiddenFields: Record<string, string>;
}): void;
//# sourceMappingURL=fieldHelperFunctions.d.ts.map