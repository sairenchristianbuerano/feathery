/// <reference types="react" />
import { FieldOptions, FieldProperties, FieldStyles } from './fieldHelperFunctions';
import Field from './entities/Field';
import SimplifiedProduct from '../integrations/stripe/SimplifiedProduct';
import Cart from '../integrations/stripe/Cart';
import Collaborator from './entities/Collaborator';
import FeatheryClient from './featheryClient';
export declare type IntegrationActionIds = string[] | string;
export declare type IntegrationActionOptions = {
    waitForCompletion?: boolean;
    multiple?: boolean;
};
export declare type RunIntegrationActions = (actionIds: IntegrationActionIds, options: IntegrationActionOptions) => Promise<{
    ok: boolean;
    error?: string;
    payload?: any;
}>;
export declare type ExtractionActionOptions = {
    waitForCompletion?: boolean;
    pages?: number[];
    variantId?: string;
    meetingUrl?: string;
};
export declare type AlloyEntities = Record<string, any>[];
export declare type ApplyAlloyJourney = (journeyToken: string, entities: AlloyEntities) => Promise<{
    ok: boolean;
    error?: string;
    payload?: any;
}>;
export declare type LoanProCustomerObject = Record<string, any>;
export declare type SearchLoanProCustomer = () => Promise<{
    ok: boolean;
    error?: any;
    payload?: any;
}>;
export declare type CreateLoanProCustomer = (bodyParams: LoanProCustomerObject) => Promise<{
    ok: boolean;
    error?: any;
    payload?: any;
}>;
export declare type GetConfigParams = {
    filter?: Record<string, any>;
    keys?: string[];
    unique?: boolean;
};
export declare type GetConfig = ({ filter, keys, unique }: GetConfigParams) => Promise<Record<string, any>[]>;
export interface FormInternalState {
    language: string | undefined;
    currentStep: any;
    previousStepName: string;
    visiblePositions: any;
    client: FeatheryClient;
    formName: string;
    formId: string;
    fields: Record<string, Field>;
    products: Record<string, SimplifiedProduct>;
    cart: Cart;
    collaborator: Collaborator;
    trackHashes?: boolean;
    formRef: React.MutableRefObject<any>;
    formSettings: any;
    getErrorCallback: (props1?: Record<string, unknown>) => (props2?: Record<string, unknown>) => Promise<boolean>;
    navigate: any;
    inlineErrors: Record<string, {
        message: string;
        index: number;
    }>;
    setInlineErrors: React.Dispatch<React.SetStateAction<Record<string, {
        message: string;
        index: number;
    }>>>;
    setUserProgress: React.Dispatch<React.SetStateAction<null>>;
    steps: any;
    setStepKey: (key: string) => void;
    updateFieldOptions: (newOptions: FieldOptions, repeatIndex?: number) => void;
    updateFieldStyles: (fieldKey: string, newStyles: FieldStyles) => void;
    updateFieldProperties: (fieldKey: string, newProperties: FieldProperties, onServar?: boolean) => void;
    setFieldErrors: (errors: Record<string, string | {
        index: number;
        message: string;
    }>) => void;
    setCalendlyUrl: (url: string) => void;
    runAIExtraction: (extractionId: string, options: ExtractionActionOptions | boolean, pages?: number[]) => Promise<Record<string, string>>;
    getConfig: GetConfig;
}
declare type InternalState = {
    [formUuid: string]: FormInternalState;
};
declare const internalState: InternalState;
export declare const setFormInternalState: (formUuid: string, stateValues: Record<string, any>, keysToKeepStable?: string[]) => FormInternalState;
export default internalState;
//# sourceMappingURL=internalState.d.ts.map