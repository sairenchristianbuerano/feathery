import { ResolvedComparisonRule } from './logic';
interface FlatHideRule extends ResolvedComparisonRule {
    index: number;
}
/**
 * Gets the set of elements that are referenced in a hide if rule for any of the elements.
 * Useful for knowing a field is involved in a rule.
 * @param elements
 * @returns Map<fieldKey, Set<Index>>
 */
declare function getHideIfReferences(elements: [
    {
        hide_ifs: FlatHideRule[];
        show_logic: boolean;
    },
    string
][]): Set<string>;
/**
 * Determines if the provided element should be hidden based on its "hide-if" rules.
 */
declare function shouldElementHide({ hide_ifs: hideIfs, show_logic: show, mobile_styles: mobileStyles, styles }: any, repeat?: number, internalId?: string): boolean;
declare const stepElementTypes: string[];
declare const getPositionKey: (node: any) => any;
export declare type VisiblePositions = Record<string, boolean[]>;
declare function getVisiblePositions(step: any, internalId: string): VisiblePositions;
declare function getVisibleElements(step: any, visiblePositions: VisiblePositions, elementTypes?: string[], repeat?: boolean): any[];
export { shouldElementHide, getHideIfReferences, getVisibleElements, getVisiblePositions, stepElementTypes, getPositionKey };
//# sourceMappingURL=hideAndRepeats.d.ts.map