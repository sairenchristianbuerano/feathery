/// <reference types="react" />
export declare function isStoreFieldValueAction(el: any): void;
export declare const getABVariant: (stepRes: any) => any;
export declare const getAllElements: (step: any) => any[];
export declare const lookUpTrigger: (step: any, elementID: string, type: string) => Record<string, any>;
/** Update the fieldValues cache with a backend session */
export declare function updateSessionValues(session: any): void;
/**
 * Set an error on a particular form DOM node(s).
 */
export declare function setFormElementError({ formRef, errorType, errorCallback, fieldKey, message, index, servarType, inlineErrors, setInlineErrors, triggerErrors }: any): Promise<boolean>;
export declare function clearBrowserErrors(formRef: React.MutableRefObject<any>): void;
export declare function objectMap(obj: any, transform: any): {};
/**
 * If a user's file is already uploaded, Feathery backend returns S3 details: { path, url }
 * We convert this information into Promises that resolve to the file
 */
export declare function fetchS3File(url: any): Promise<File>;
export declare function clearFilePathMapEntry(key: any, index?: null): void;
export declare function registerRenderCallback(internalId: string, key: 'form' | 'loginForm', callback: () => void): void;
export declare function rerenderAllForms(): void;
export declare function remountAllForms(saveCurrentStep?: boolean): void;
export declare function prioritizeActions(actions: any[]): any[];
export declare function mapFormSettingsResponse(res: any): {
    errorType: any;
    autocomplete: string;
    autofocus: any;
    allowEdits: any;
    completionBehavior: any;
    showBrand: boolean;
    brandPosition: any;
    autoscroll: any;
    rightToLeft: any;
    saveUrlParams: any;
    enterToSubmit: any;
    globalStyles: any;
    saveHideIfFields: any;
    clearHideIfFields: any;
    mobileBreakpoint: any;
};
export declare function updateCustomHead(headCode: string): Promise<void>;
export declare function updateCustomCSS(cssCode: string): void;
export declare function isElementInViewport(el: any): boolean;
export declare function httpHelpers(client: any, connectorFields?: string[]): Record<string, any>;
//# sourceMappingURL=formHelperFunctions.d.ts.map