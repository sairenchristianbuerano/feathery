import FeatheryClient from './featheryClient';
export declare type FeatheryFieldTypes = null | boolean | string | string[] | number | number[] | Promise<File> | Promise<File>[] | Record<string, any>;
export declare type FieldValues = {
    [fieldKey: string]: FeatheryFieldTypes;
};
declare type InitOptions = {
    userId?: string;
    cacheUserId?: boolean;
    collaboratorId?: string;
    collaboratorReview?: '' | 'readOnly' | 'editable';
    preloadForms?: string[];
    userTracking?: 'cookie' | 'fingerprint';
    language?: string;
    theme?: string;
    noSave?: boolean;
    _enterpriseRegion?: string;
};
declare type InitState = {
    initialized: boolean;
    sdkKey: string;
    overrideUserId: boolean;
    formSchemas: {
        [formId: string]: any;
    };
    formSessions: {
        [formId: string]: any;
    };
    fieldValuesInitialized: boolean;
    redirectCallbacks: Record<string, any>;
    renderCallbacks: Record<string, Record<string, any>>;
    remountCallbacks: Record<string, any>;
    defaultErrors: Record<string, string>;
    isTestEnv: boolean;
    theme: string;
    region: string;
    initNoSave: boolean;
    _internalUserId: string;
} & InitOptions;
declare let initFormsPromise: Promise<void>;
export declare const defaultClient: FeatheryClient;
declare const initState: InitState;
declare let fieldValues: FieldValues;
declare let filePathMap: Record<string, null | string | (string | null)[]>;
export declare const fileSubmittedMap: Record<string, number>;
declare function init(sdkKey: string, options?: InitOptions): Promise<string>;
declare function initInfo(): InitState;
declare function updateUserId(newUserId?: string, merge?: boolean): Promise<void>;
declare function updateTheme(newTheme?: string): Promise<void>;
/**
 * If customers provide files through setFieldValues
 * we need to explicitly convert any files to file Promises
 * since they may not have done so
 */
declare function setFieldValues(userVals: FieldValues, rerender?: boolean): void;
declare function getFieldValues(): {
    [x: string]: FeatheryFieldTypes;
};
export { init, initInfo, updateUserId, updateTheme, setFieldValues, getFieldValues, initState, initFormsPromise, fieldValues, filePathMap };
//# sourceMappingURL=init.d.ts.map