/// <reference types="react" />
export declare const THUMBNAIL_TYPE: {
    PDF: string;
    IMAGE: string;
    UNKNOWN: string;
};
export declare const BASE64_REGEX: RegExp;
export declare function getThumbnailType(file: File): string;
/**
 * Utility hook for handling file values in file upload fields.
 * This custom hook maintains a referentially-stable list of files,
 * and will execute a callback every time that list changes.
 */
export declare function useFileData(initialFiles: any, onSetFiles?: () => void): (any[] | import("react").Dispatch<import("react").SetStateAction<any[]>>)[];
/**
 * Given a File (or a Promise<File>), convert the file to a filename and thumbnail.
 * Filename will be a plaintext string and thumbnail will be a base64 encoded image.
 */
export declare function getThumbnailData(filePromise: File | Promise<File>): Promise<{
    filename: string;
    thumbnail: string;
}>;
/**
 * Given a File (or a Promise<File>), convert the file to a source url and file type.
 */
export declare function getRenderData(filePromise: File | Promise<File>): Promise<{
    type: string;
    url: string;
}>;
/**
 * Utility hook for converting a list of files into a list of thumbnail information.
 */
export declare function useThumbnailData(files: Promise<File>[]): {
    filename: string;
    thumbnail: string;
}[];
export declare const dataURLToFile: (dataURL: any, name: any) => File;
export declare const toBase64: (file: any) => Promise<string>;
export declare const isBase64Image: (string: any) => boolean;
//# sourceMappingURL=image.d.ts.map