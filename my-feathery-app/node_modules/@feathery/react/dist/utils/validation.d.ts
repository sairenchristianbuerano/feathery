import { ResolvedComparisonRule } from './logic';
import React from 'react';
import { Trigger } from '../types/Form';
export interface ResolvedCustomValidation {
    message: string;
    rules: ResolvedComparisonRule[];
}
/**
 * Validate elements on a form
 */
declare function validateElements({ step, visiblePositions, triggerErrors, errorType, formRef, errorCallback, setInlineErrors, trigger }: {
    step: any;
    visiblePositions: any;
    triggerErrors: boolean;
    errorType: string;
    formRef: React.MutableRefObject<any>;
    errorCallback?: any;
    setInlineErrors: any;
    trigger?: Trigger;
}): {
    errors: {
        [fieldKey: string]: string;
    };
    inlineErrors: {
        [key: string]: any;
    };
    invalid: boolean;
};
/**
 * Performs all default/standard and custom validations on a field/element
 * and returns any validation message.
 */
declare function validateElement(element: {
    servar?: {
        type: string;
        key: string;
        metadata?: any;
        required: boolean;
        repeated: boolean;
    };
    validations?: ResolvedCustomValidation[];
}, repeat: any): string;
declare const emailPatternStr = "^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]{2,63})+$";
declare let phoneLibPromise: Promise<void>;
declare const loadPhoneValidator: () => any;
declare const validators: {
    email: (a: string) => boolean;
    phone: (a: string) => any;
    url: (a: string) => boolean;
};
declare function isFieldValueEmpty(value: any, servar: any): any;
/**
 * Default validations.
 * Returns the error message for a field value if it's invalid.
 * Returns an empty string if it's valid.
 */
declare function getStandardFieldError(value: any, servar: any, repeat: any): string;
export { validateElement, validateElements, getStandardFieldError, isFieldValueEmpty, emailPatternStr, loadPhoneValidator, validators, phoneLibPromise };
//# sourceMappingURL=validation.d.ts.map