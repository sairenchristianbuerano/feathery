import { FieldOptions } from './fieldHelperFunctions';
import { FieldValues, updateTheme, updateUserId } from './init';
import { AlloyEntities, GetConfigParams, IntegrationActionIds, IntegrationActionOptions, LoanProCustomerObject } from './internalState';
/**
 * Used by contextRef in <Form />, renderAt for vanillajs, and the lifecycle
 * methods
 *
 * @param formUuid
 * @returns Form context object
 */
export declare const getFormContext: (formUuid: string) => {
    userId: string | undefined;
    sdkKey: string;
    formName: string;
    formId: string;
    _getInternalUserId: () => string;
    fields: Record<string, import("./entities/Field").default>;
    products: Record<string, import("../integrations/stripe/SimplifiedProduct").default>;
    cart: import("../integrations/stripe/Cart").default;
    collaborator: import("./entities/Collaborator").default;
    setFormCompletion: () => Promise<any>;
    setProgress: (val: any) => void;
    updateUserId: typeof updateUserId;
    updateTheme: typeof updateTheme;
    goToStep: (stepKey: any) => void;
    isTestForm: () => boolean;
    isLastStep: () => boolean;
    getStepProperties: () => {
        totalSteps: number;
        stepName: any;
        previousStepName: string;
        backgroundColor: any;
        language: string | undefined;
        hideRules: Record<string, any>;
    };
    validateStep: (showErrors?: boolean) => {
        [fieldKey: string]: string;
    };
    openUrl: (url: string, target?: string) => Promise<void>;
    runIntegrationActions: (actionIds: IntegrationActionIds, options: IntegrationActionOptions) => Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: string;
        payload?: undefined;
    }>;
    runAIExtraction: (extractionId: string, options?: {
        waitForCompletion: boolean;
    }, pages?: number[]) => Promise<Record<string, string>>;
    setCalendlyUrl: (url: string) => void;
    applyAlloyJourney: (journeyToken: string, entities: AlloyEntities) => Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: string;
        payload?: undefined;
    }>;
    searchLoanProCustomer: () => Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: any;
        payload?: undefined;
    }>;
    createLoanProCustomer: (bodyParams: LoanProCustomerObject) => Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: any;
        payload?: undefined;
    }>;
    setCollaboratorAsCompleted: (templateId: string) => Promise<any>;
    generateDocuments: ({ documentIds, download }: {
        documentIds: string[];
        download?: boolean | undefined;
    }) => Promise<{
        files: any;
    } | undefined>;
    getQuikForms: (props: {
        dealerNames: string[];
    }) => Promise<any>;
    getQuikFormRoles: (props: {
        formIds: number[];
    }) => Promise<any>;
    getConfig: (params: GetConfigParams) => Promise<any>;
    setFieldValues: (userVals: FieldValues) => void;
    getFieldValues: () => {
        [x: string]: import("./init").FeatheryFieldTypes;
    };
    setFieldOptions: (newOptions: FieldOptions) => void;
    getFormFields: () => {};
    setFieldErrors: (errors: Record<string, string | {
        index: number;
        message: string;
    }>) => void;
};
//# sourceMappingURL=formContext.d.ts.map