import Elements from './elements';
import Form, { Props as FormProps, StyledContainer } from './Form';
import { init, updateUserId, setFieldValues, getFieldValues, updateTheme } from './utils/init';
import { OPERATOR_CODE } from './utils/logic';
import { FormContext } from './types/Form';
import LoginForm from './auth/LoginForm';
import useAuthClient from './auth/useAuthClient';
import './utils/polyfills';
/**
 * Utility function which renders a form with the provided props in the DOM element with the provided ID.
 * @param {string} elementId The ID of the DOM element to hold the form
 * @param {Object} props The props defined on the *Form* component
 */
declare function renderAt(elementId: any, props: FormProps, loginEnabled?: boolean): {
    destroy: () => void;
    userId: string | undefined;
    sdkKey: string;
    formName: string;
    formId: string;
    _getInternalUserId: () => string;
    fields: Record<string, import("./utils/entities/Field").default>;
    products: Record<string, import("./integrations/stripe/SimplifiedProduct").default>;
    cart: import("./integrations/stripe/Cart").default;
    collaborator: import("./utils/entities/Collaborator").default;
    setFormCompletion: () => Promise<any>;
    setProgress: (val: any) => void;
    updateUserId: typeof updateUserId;
    updateTheme: typeof updateTheme;
    goToStep: (stepKey: any) => void;
    isTestForm: () => boolean;
    isLastStep: () => boolean;
    getStepProperties: () => {
        totalSteps: number;
        stepName: any;
        previousStepName: string;
        backgroundColor: any;
        language: string | undefined;
        hideRules: Record<string, any>;
    };
    validateStep: (showErrors?: boolean) => {
        [fieldKey: string]: string;
    };
    openUrl: (url: string, target?: string) => Promise<void>;
    runIntegrationActions: (actionIds: import("./utils/internalState").IntegrationActionIds, options: import("./utils/internalState").IntegrationActionOptions) => Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: string;
        payload?: undefined;
    }>;
    runAIExtraction: (extractionId: string, options?: {
        waitForCompletion: boolean;
    }, pages?: number[] | undefined) => Promise<Record<string, string>>;
    setCalendlyUrl: (url: string) => void;
    applyAlloyJourney: (journeyToken: string, entities: import("./utils/internalState").AlloyEntities) => Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: string;
        payload?: undefined;
    }>;
    searchLoanProCustomer: () => Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: any;
        payload?: undefined;
    }>;
    createLoanProCustomer: (bodyParams: import("./utils/internalState").LoanProCustomerObject) => Promise<{
        ok: boolean;
        payload: any;
        error?: undefined;
    } | {
        ok: boolean;
        error: any;
        payload?: undefined;
    }>;
    setCollaboratorAsCompleted: (templateId: string) => Promise<any>;
    generateDocuments: ({ documentIds, download }: {
        documentIds: string[];
        download?: boolean | undefined;
    }) => Promise<{
        files: any;
    } | undefined>;
    getQuikForms: (props: {
        dealerNames: string[];
    }) => Promise<any>;
    getQuikFormRoles: (props: {
        formIds: number[];
    }) => Promise<any>;
    getConfig: (params: import("./utils/internalState").GetConfigParams) => Promise<any>;
    setFieldValues: (userVals: import("./utils/init").FieldValues) => void;
    getFieldValues: () => {
        [x: string]: import("./utils/init").FeatheryFieldTypes;
    };
    setFieldOptions: (newOptions: import("./utils/fieldHelperFunctions").FieldOptions) => void;
    getFormFields: () => {};
    setFieldErrors: (errors: Record<string, string | {
        index: number;
        message: string;
    }>) => void;
};
declare const Feathery: {
    Form: typeof Form;
    Elements: {
        AddressLine1: import("react").MemoExoticComponent<({ element, responsiveStyles, fieldLabel, elementProps, disabled, autoComplete, editMode, repeatIndex, onSelect, onChange, required, onBlur, onEnter, setRef, value, inlineError, children }: any) => import("@emotion/react/jsx-runtime").JSX.Element>;
        ButtonGroupField: typeof import("./elements/fields/ButtonGroupField").default;
        CheckboxField: typeof import("./elements/fields/CheckboxField").default;
        CheckboxGroupField: typeof import("./elements/fields/CheckboxGroupField").default;
        ColorPickerField: typeof import("./elements/fields/ColorPickerField").default;
        CustomField: import("react").MemoExoticComponent<({ element, elementProps, responsiveStyles, onChange, rawValue, required, disabled, fieldStyles, editMode, rightToLeft, index }: any) => import("@emotion/react/jsx-runtime").JSX.Element>;
        DateSelectorField: import("react").MemoExoticComponent<({ element, responsiveStyles, fieldLabel, elementProps, required, disabled, repeatIndex, editMode, onComplete, onEnter, setRef, value, inlineError, children }: import("./elements/fields/DateSelectorField").DateSelectorProps) => import("@emotion/react/jsx-runtime").JSX.Element>;
        DropdownField: typeof import("./elements/fields/DropdownField").default;
        DropdownMultiField: typeof import("./elements/fields/DropdownMultiField").default;
        FileUploadField: typeof import("./elements/fields/FileUploadField").default;
        MatrixField: typeof import("./elements/fields/MatrixField").default;
        PasswordField: import("react").MemoExoticComponent<({ element, responsiveStyles, fieldLabel, elementProps, required, disabled, repeatIndex, editMode, onChange, onEnter, setRef, rawValue, inlineError, children }: any) => import("@emotion/react/jsx-runtime").JSX.Element>;
        PaymentMethodField: import("react").MemoExoticComponent<({ editMode, children, ...props }: any) => import("@emotion/react/jsx-runtime").JSX.Element>;
        PhoneField: import("react").MemoExoticComponent<({ element, responsiveStyles, fieldLabel, fullNumber, elementProps, required, disabled, repeatIndex, autoComplete, editMode, onComplete, setRef, inlineError, rightToLeft, onEnter, children }: any) => import("@emotion/react/jsx-runtime").JSX.Element>;
        PinInputField: typeof import("./elements/fields/PinInputField").default;
        QRScanner: typeof import("./elements/fields/QRScanner").default;
        RadioButtonGroupField: typeof import("./elements/fields/RadioButtonGroupField").default;
        RatingField: typeof import("./elements/fields/RatingField").default;
        SignatureField: typeof import("./elements/fields/SignatureField").default;
        SliderField: typeof import("./elements/fields/SliderField").default;
        TextField: import("react").MemoExoticComponent<({ element, responsiveStyles, fieldLabel, elementProps, required, disabled, autoComplete, editMode, onAccept, onEnter, setRef, inlineError, repeatIndex, children }: any) => import("@emotion/react/jsx-runtime").JSX.Element>;
        TextArea: import("react").MemoExoticComponent<({ element, responsiveStyles, fieldLabel, elementProps, required, disabled, editMode, onChange, setRef, rawValue, inlineError, repeatIndex, children }: any) => import("@emotion/react/jsx-runtime").JSX.Element>;
        ImageElement: typeof import("./elements/basic/ImageElement").default;
        VideoElement: typeof import("./elements/basic/VideoElement").default;
        TextElement: typeof import("./elements/basic/TextElement").default;
        ButtonElement: typeof import("./elements/basic/ButtonElement").default;
        ProgressBarElement: typeof import("./elements/basic/ProgressBarElement").default;
    };
    init: typeof init;
    updateUserId: typeof updateUserId;
    updateTheme: typeof updateTheme;
    setFieldValues: typeof setFieldValues;
    getFieldValues: typeof getFieldValues;
    renderAt: typeof renderAt;
};
export { Form, Elements, init, updateUserId, updateTheme, setFieldValues, getFieldValues, renderAt, LoginForm, useAuthClient, Feathery, StyledContainer };
export type { OPERATOR_CODE, FormContext };
export type { StyledContainerProps } from './Form/grid/StyledContainer';
//# sourceMappingURL=index.d.ts.map