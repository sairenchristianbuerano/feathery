/// <reference types="jest" />
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel };
export declare const createPinElement: (type?: string, metadata?: any, properties?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createPinProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnChange: () => jest.Mock<void, [value: string]>;
export declare const createPinLengthMetadata: (length: number) => {
    max_length: number;
};
export declare const create4DigitPinElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const create6DigitPinElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const create8DigitPinElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const getPinInputs: () => HTMLInputElement[];
export declare const getPinInput: (index: number) => HTMLInputElement;
export declare const getPinInputCount: () => number;
export declare const getPinContainer: () => Element | null;
export declare const getFocusedPinInput: () => HTMLInputElement;
export declare const typeDigitInInput: (index: number, digit: string) => void;
export declare const typePinSequence: (pin: string) => void;
export declare const clearPinInput: (index: number) => void;
export declare const focusPinInput: (index: number) => void;
export declare const blurPinInput: (index: number) => void;
export declare const pressKeyOnInput: (index: number, key: string) => void;
export declare const pressHotkey: (key: string) => void;
export declare const pastePinCode: (index: number, code: string) => void;
export declare const simulateSMSOTP: (code: string) => void;
export declare const pressBackspaceOnInput: (index: number) => void;
export declare const pressDeleteOnInput: (index: number) => void;
export declare const pressLeftArrowOnInput: (index: number) => void;
export declare const pressRightArrowOnInput: (index: number) => void;
export declare const pressEnterOnInput: (index: number) => void;
export declare const expectPinInputToHaveValue: (index: number, expectedValue: string) => void;
export declare const expectPinInputsToHaveValues: (expectedValues: string[]) => void;
export declare const expectCompletePinValue: (expectedPin: string) => void;
export declare const expectPinInputToBeFocused: (index: number) => void;
export declare const expectPinInputToBeDisabled: (index: number) => void;
export declare const expectPinInputToBeEnabled: (index: number) => void;
export declare const expectAllPinInputsToBeDisabled: () => void;
export declare const expectAllPinInputsToBeEnabled: () => void;
export declare const expectPinInputCount: (expectedCount: number) => void;
export declare const expectPinInputToHaveAttributes: (index: number, expectedAttributes: any) => void;
export declare const expectPinInputToHaveAutocomplete: (index: number, expectedValue: string) => void;
export declare const expectPinInputToAcceptOnlySingleDigit: (index: number) => void;
export declare const expectFieldToHaveValue: (expectedValue: string) => void;
export declare const expectPinToBeComplete: (expectedPin: string) => void;
export declare const expectPinToBeIncomplete: () => void;
export declare const expectPinToBeEmpty: () => void;
export declare const expectAutoFocusOnFirstInput: () => void;
export declare const expectNavigationToWork: () => void;
export declare const expectBackspaceToWork: () => void;
export declare const expectPasteToWork: (pin: string) => void;
export declare const expectSMSOTPToWork: (code: string) => void;
export declare const completePinEntry: (pin: string) => void;
export declare const expectOnlyNumericInput: (index: number) => void;
export declare const expectInputLengthRestriction: (index: number) => void;
//# sourceMappingURL=test-utils.d.ts.map