/// <reference types="jest" />
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue };
export declare const createRatingElement: (type?: string, metadata?: any, properties?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createRatingProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnChange: () => jest.Mock<void, [value: number]>;
export declare const getRatingIcons: (iconType?: 'star' | 'heart') => HTMLElement[];
export declare const getRatingIcon: (index: number, iconType?: 'star' | 'heart') => HTMLElement;
export declare const getRatingIconCount: (iconType?: 'star' | 'heart') => number;
export declare const clickRatingIcon: (index: number, iconType?: 'star' | 'heart') => void;
export declare const hoverRatingIcon: (index: number, iconType?: 'star' | 'heart') => void;
export declare const unhoverRatingIcon: (index: number, iconType?: 'star' | 'heart') => void;
export declare const areRatingIconsDisabled: (iconType?: 'star' | 'heart') => boolean;
export declare const areRatingIconsEnabled: (iconType?: 'star' | 'heart') => boolean;
export declare const expectRatingIconCount: (expectedCount: number, iconType?: 'star' | 'heart') => void;
export declare const expectRatingValue: (expectedValue: number) => void;
//# sourceMappingURL=test-utils.d.ts.map