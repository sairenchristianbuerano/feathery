/// <reference types="jest" />
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel };
export declare const createDropdownMultiElement: (type: string, metadata?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createDropdownMultiProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnChange: () => jest.Mock<void, [selectedOptions: any[]]>;
export declare const createOptionsMetadata: (options: string[], labels?: string[], tooltips?: string[]) => {
    option_tooltips?: string[] | undefined;
    option_labels?: string[] | undefined;
    options: string[];
};
export declare const createRepeatOptionsMetadata: (repeatOptions: any[]) => {
    repeat_options: any[][];
};
export declare const createMaxLengthElement: (maxLength: number, options?: string[]) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createCreatableElement: (options: string[]) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const getSelectInput: () => HTMLInputElement;
export declare const getReactSelectContainer: () => HTMLElement;
export declare const getOptionElements: () => Element[];
export declare const getOptionByText: (text: string) => Element | undefined;
export declare const getSelectedValues: () => Element[];
export declare const getSelectedValueElement: (text: string) => Element | undefined;
export declare const getRemoveButton: (text: string) => HTMLElement | null;
export declare const expectMultiSelectToHaveOptionCount: (count: number) => void;
export declare const expectSelectedValueCount: (count: number) => void;
export declare const expectValueToBeSelected: (text: string) => void;
export declare const openDropdownMenu: (user: any) => Promise<void>;
export declare const selectOptionByText: (user: any, text: string) => Promise<void>;
export declare const removeSelectedValue: (user: any, text: string) => Promise<void>;
//# sourceMappingURL=test-utils.d.ts.map