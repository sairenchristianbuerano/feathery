/// <reference types="react" />
/// <reference types="jest" />
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel };
export declare const createDropdownElement: (type: string, metadata?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createDropdownProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnChange: () => jest.Mock<void, [e: import("react").ChangeEvent<HTMLSelectElement>]>;
export declare const createOptionsMetadata: (options: string[], labels?: string[], tooltips?: string[]) => {
    option_tooltips?: string[] | undefined;
    option_labels?: string[] | undefined;
    options: string[];
};
export declare const createRepeatOptionsMetadata: (repeatOptions: any[]) => {
    repeat_options: any[][];
};
export declare const getSelectElement: () => HTMLSelectElement;
export declare const getOptionElements: () => HTMLOptionElement[];
export declare const getOptionByValue: (value: string) => HTMLOptionElement | undefined;
export declare const getOptionByText: (text: string) => HTMLOptionElement | undefined;
export declare const expectOptionToHaveTooltip: (option: HTMLOptionElement, tooltip: string) => void;
export declare const expectSelectToHaveValue: (value: string) => void;
export declare const expectSelectToHaveOptionCount: (count: number) => void;
//# sourceMappingURL=test-utils.d.ts.map