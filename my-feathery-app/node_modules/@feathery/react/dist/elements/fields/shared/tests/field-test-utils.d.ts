/// <reference types="jest" />
import React from 'react';
export declare const setMockFieldValue: (value: any) => void;
export declare const getMockFieldValue: () => any;
export declare const resetMockFieldValue: () => void;
export declare const mockResponsiveStyles: {
    getTarget: jest.Mock<{}, []>;
    getTargets: jest.Mock<{}, []>;
    getMobileBreakpoint: jest.Mock<number, []>;
    applyFontStyles: jest.Mock<any, any>;
    addTargets: jest.Mock<any, any>;
    apply: jest.Mock<any, any>;
    applyHeight: jest.Mock<any, any>;
    applyWidth: jest.Mock<any, any>;
    applyBorders: jest.Mock<any, any>;
    applyCorners: jest.Mock<any, any>;
    applyBoxShadow: jest.Mock<any, any>;
    applyColor: jest.Mock<any, any>;
    applySelectorStyles: jest.Mock<any, any>;
};
export declare const createBaseElement: (id: string, type: string, metadata?: any, properties?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createFieldProps: (element: any, customProps?: any) => any;
export declare const createStatefulTextOnChange: () => jest.Mock<void, [e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>]>;
export declare const createStatefulFileOnChange: () => jest.Mock<void, [files: any[]]>;
export declare const createStatefulAcceptHandler: () => jest.Mock<void, [val: any]>;
export declare const createMockFile: (name: string, type: string, size?: number, content?: string) => File;
export declare const createMockImageFile: (name?: string, size?: number) => File;
export declare const createMockDocumentFile: (name?: string, size?: number) => File;
export declare const createFileInputChangeEvent: (files: File[]) => {
    target: {
        files: FileList;
    };
};
export declare const createDragEvent: (files: File[]) => {
    preventDefault: jest.Mock<any, any>;
    stopPropagation: jest.Mock<any, any>;
    dataTransfer: {
        files: FileList;
    };
};
export declare const expectFieldToBeDisabled: (field: HTMLElement) => void;
export declare const expectFieldToBeRequired: (field: HTMLElement) => void;
export declare const expectFieldToHaveMaxLength: (field: HTMLElement, maxLength: number) => void;
export declare const expectFieldToHaveMinLength: (field: HTMLElement, minLength: number) => void;
export declare const expectFieldToHaveAriaLabel: (field: HTMLElement, label: string) => void;
//# sourceMappingURL=field-test-utils.d.ts.map