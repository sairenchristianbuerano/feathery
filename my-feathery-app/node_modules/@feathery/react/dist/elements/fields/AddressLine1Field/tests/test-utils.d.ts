/// <reference types="jest" />
import React from 'react';
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue };
export declare const createAddressLine1Element: (type?: string, metadata?: any, properties?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createAddressLine1Props: (element: any, customProps?: any) => any;
export declare const createStatefulOnChange: () => jest.Mock<void, [e: React.ChangeEvent<HTMLInputElement>]>;
export declare const AddressWrapper: ({ element, ...initialProps }: any) => React.CElement<any, React.Component<any, any, any>>;
export declare const getAddressInput: () => HTMLInputElement;
export declare const getDropdownOverlay: () => HTMLElement;
export declare const getDropdownOptions: () => HTMLElement[];
export declare const typeInAddressInput: (value: string) => Promise<void>;
export declare const focusAddressInput: () => Promise<void>;
export declare const blurAddressInput: () => Promise<void>;
export declare const pressEnterOnInput: () => Promise<void>;
export declare const pressEscapeOnInput: () => Promise<void>;
export declare const clickDropdownOption: (index: number) => Promise<void>;
export declare const isDropdownVisible: () => boolean;
export declare const isAddressInputDisabled: () => boolean;
export declare const getInputMaxLength: () => number | null;
export declare const getInputMinLength: () => number | null;
export declare const expectAddressValue: (expectedValue: string) => void;
export declare const createMockAddressSearchResult: (display: string, addressId: string) => {
    display: string;
    address_id: string;
};
export declare const createMockAddressDetail: (overrides?: any) => any;
export declare const waitForDebounce: (ms?: number) => Promise<unknown>;
//# sourceMappingURL=test-utils.d.ts.map