/// <reference types="jest" />
import React from 'react';
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel };
export declare const createMatrixElement: (type?: string, metadata?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createMatrixProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnChange: () => jest.Mock<void, [e: React.ChangeEvent<HTMLInputElement>]>;
export declare const createOptionsMetadata: (options: string[], optionLabels?: string[], optionTooltips?: string[]) => {
    option_tooltips?: string[] | undefined;
    option_labels?: string[] | undefined;
    options: string[];
};
export declare const createQuestionsMetadata: (questions: Array<{
    id: string;
    label: string;
    tooltip?: string;
    read_only?: boolean;
    highlight_color?: string;
}>) => {
    questions: {
        id: string;
        label: string;
        tooltip?: string | undefined;
        read_only?: boolean | undefined;
        highlight_color?: string | undefined;
    }[];
};
export declare const createRepeatOptionsMetadata: (repeatOptions: any[]) => {
    repeat_options: any[][];
};
export declare const createMultipleMatrixElement: (options?: string[]) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createSingleMatrixElement: (options?: string[]) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const getMatrixContainer: () => HTMLElement;
export declare const getMatrixInputs: () => HTMLInputElement[];
export declare const getMatrixInput: (questionId: string, optionValue: string) => HTMLInputElement | undefined;
export declare const getQuestionInputs: (questionId: string) => HTMLInputElement[];
export declare const getColumnHeaders: () => HTMLElement[];
export declare const getQuestionRows: () => HTMLElement[];
export declare const getQuestionLabel: (questionId: string) => string | null;
export declare const expectMatrixInputToBeChecked: (questionId: string, optionValue: string) => void;
export declare const expectMatrixInputToBeUnchecked: (questionId: string, optionValue: string) => void;
export declare const expectMatrixInputType: (type: 'checkbox' | 'radio') => void;
export declare const expectMatrixInputToBeDisabled: (questionId: string, optionValue: string) => void;
export declare const expectMatrixInputToBeEnabled: (questionId: string, optionValue: string) => void;
export declare const expectMatrixToHaveQuestionCount: (count: number) => void;
export declare const expectMatrixToHaveOptionCount: (count: number) => void;
export declare const expectQuestionToHaveTooltip: (questionId: string, tooltip: string) => void;
export declare const expectQuestionToHaveHighlightColor: (questionId: string, color: string) => void;
export declare const expectMatrixToHaveValues: (expectedValues: Record<string, string[]>) => void;
//# sourceMappingURL=test-utils.d.ts.map