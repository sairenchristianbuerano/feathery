/// <reference types="jest" />
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel };
export declare const createDateSelectorElement: (type?: string, metadata?: any, properties?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createDateSelectorProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnComplete: () => jest.Mock<void, [value: string]>;
export declare const createDisplayFormatMetadata: (useDDMMYYYY?: boolean) => {
    display_format: boolean;
};
export declare const createTimeMetadata: (format?: '12hr' | '24hr', interval?: number, minTime?: string, maxTime?: string) => {
    max_time?: string | undefined;
    min_time?: string | undefined;
    choose_time: boolean;
    time_format: "24hr" | "12hr";
    time_interval: number;
};
export declare const createDateRestrictionsMetadata: (noPast?: boolean, noFuture?: boolean, noWeekends?: boolean, disabledDates?: string[]) => {
    disabled_dates?: string[] | undefined;
    no_weekends?: boolean | undefined;
    no_future?: boolean | undefined;
    no_past?: boolean | undefined;
};
export declare const createMMDDYYYYElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createDDMMYYYYElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createTimeEnabledElement: (format?: '12hr' | '24hr', interval?: number) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createRestrictedDateElement: (restrictions?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const getDatePickerInput: () => Promise<HTMLInputElement>;
export declare const getMaskedInput: () => HTMLInputElement;
export declare const getTooltip: () => Element | null;
export declare const setDateValue: (value: string) => Promise<void>;
export declare const focusDateInput: () => Promise<void>;
export declare const blurDateInput: () => Promise<void>;
export declare const pressEnterKey: () => Promise<void>;
export declare const inputDateInput: (value: string) => Promise<void>;
export declare const expectDateInputToHaveValue: (expectedValue: string) => Promise<void>;
export declare const expectDateInputToBeOptional: () => Promise<void>;
export declare const expectTooltipToHaveText: (expectedText: string) => void;
export declare const expectFieldToHaveValue: (expectedValue: string) => void;
export declare const getTodayISO: () => string;
export declare const getPastDateISO: (daysAgo?: number) => string;
export declare const getFutureDateISO: (daysFromNow?: number) => string;
export declare const getWeekendDateISO: () => string;
export declare const createDisabledDateString: (month: number, day: number) => string;
export declare const expectDateToBeFiltered: (dateString: string, shouldBeFiltered: boolean) => Promise<void>;
//# sourceMappingURL=test-utils.d.ts.map