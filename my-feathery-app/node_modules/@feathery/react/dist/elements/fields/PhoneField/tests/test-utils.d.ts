/// <reference types="jest" />
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel };
export declare const createPhoneElement: (type?: string, metadata?: any, properties?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createPhoneProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnComplete: () => jest.Mock<void, [value: string]>;
export declare const createDefaultCountryMetadata: (country: string | 'auto') => {
    default_country: string;
};
export declare const createDisableOtherCountriesMetadata: (disabled?: boolean) => {
    disable_other_countries: boolean;
};
export declare const createUSPhoneElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createUKPhoneElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createAutoCountryPhoneElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createRestrictedPhoneElement: (metadata?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const getPhoneInput: () => HTMLInputElement;
export declare const getCountryTrigger: () => Element | null;
export declare const getCountryDropdown: () => Element | null;
export declare const getCountrySearchInput: () => HTMLInputElement;
export declare const getCountryOption: (countryCode: string) => Element | null;
export declare const getPlaceholder: () => Element | null;
export declare const getTooltip: () => Element | null;
export declare const getOverlay: () => Element | null;
export declare const openCountryDropdown: (user: any) => Promise<void>;
export declare const closeCountryDropdown: () => void;
export declare const selectCountry: (countryCode: string) => void;
export declare const searchCountry: (query: string) => void;
export declare const typePhoneNumber: (input: HTMLInputElement, value: string) => void;
export declare const typePartialPhoneNumber: (input: HTMLInputElement, value: string) => void;
export declare const focusPhoneInput: (input: HTMLInputElement) => void;
export declare const blurPhoneInput: (input: HTMLInputElement) => void;
export declare const pressEnterKey: (input: HTMLInputElement) => void;
export declare const pressPlusKey: (input: HTMLInputElement) => void;
export declare const expectPhoneInputToHaveValue: (expectedValue: string) => void;
export declare const expectPhoneInputToContain: (expectedValue: string) => void;
export declare const expectPhoneInputToHavePlaceholder: (expectedPlaceholder: string) => void;
export declare const expectPhoneInputToBeDisabled: () => void;
export declare const expectPhoneInputToBeEnabled: () => void;
export declare const expectCountryDropdownToBeOpen: () => void;
export declare const expectCountryDropdownToBeClosed: () => void;
export declare const expectCurrentCountryToBe: (countryCode: string, phoneCode: string) => void;
export declare const expectCountryOptionToBeAvailable: (countryCode: string) => void;
export declare const expectCountryOptionToBeUnavailable: (countryCode: string) => void;
export declare const expectCountryTriggerToBeDisabled: () => void;
export declare const expectCountryTriggerToBeEnabled: () => void;
export declare const expectPlaceholderToBeVisible: (expectedText: string) => void;
export declare const expectPlaceholderToBeHidden: () => void;
export declare const expectTooltipToHaveText: (expectedText: string) => void;
export declare const expectFieldToHaveValue: (expectedValue: string) => void;
export declare const expectPhoneNumberToBeFormatted: (input: HTMLInputElement, expectedFormat: string) => void;
export declare const expectPhoneNumberToBeValidLength: (phoneNumber: string, countryCode: string) => void;
export declare const expectPhoneNumberToBeInvalidLength: (phoneNumber: string, countryCode: string) => void;
export declare const mockTimezone: (timezone: string) => void;
export declare const completePhoneEntry: (user: any, fullNumber: string, countryCode?: string) => Promise<void>;
export declare const testAsYouTypeFormatting: (input: HTMLInputElement, digits: string[], expectedFormats: string[]) => void;
//# sourceMappingURL=test-utils.d.ts.map