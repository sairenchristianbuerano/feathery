/// <reference types="jest" />
import React from 'react';
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel, expectFieldToHaveMaxLength, expectFieldToHaveMinLength } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel, expectFieldToHaveMaxLength, expectFieldToHaveMinLength };
export declare const createPasswordElement: (type?: string, metadata?: any, properties?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createPasswordProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnChange: () => jest.Mock<void, [e: React.ChangeEvent<HTMLInputElement>]>;
export declare const getPasswordInput: () => HTMLInputElement;
export declare const hasEyeIcon: () => boolean;
export declare const clickEyeIcon: () => void;
export declare const isPasswordVisible: () => boolean;
export declare const isPasswordHidden: () => boolean;
export declare const hasAtLeastOneLetter: (password: string) => boolean;
export declare const hasAtLeastOneUppercase: (password: string) => boolean;
export declare const hasAtLeastOneLowercase: (password: string) => boolean;
export declare const hasAtLeastOneNumber: (password: string) => boolean;
export declare const hasAtLeastOneSymbol: (password: string) => boolean;
export declare const validatePasswordConstraints: (password: string, constraints: {
    hasLetter?: boolean;
    hasUppercase?: boolean;
    hasLowercase?: boolean;
    hasNumber?: boolean;
    hasSymbol?: boolean;
}) => boolean;
//# sourceMappingURL=test-utils.d.ts.map