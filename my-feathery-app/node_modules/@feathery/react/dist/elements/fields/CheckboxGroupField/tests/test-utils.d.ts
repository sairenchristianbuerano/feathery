/// <reference types="jest" />
import React from 'react';
import { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel } from '../../shared/tests/field-test-utils';
export { mockResponsiveStyles, setMockFieldValue, getMockFieldValue, resetMockFieldValue, expectFieldToBeDisabled, expectFieldToBeRequired, expectFieldToHaveAriaLabel };
export declare const createCheckboxGroupElement: (type?: string, metadata?: any, styles?: any) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createCheckboxGroupProps: (element: any, customProps?: any) => any;
export declare const createStatefulOnChange: () => jest.Mock<void, [e: React.ChangeEvent<HTMLInputElement>]>;
export declare const createStatefulOtherOnChange: () => jest.Mock<void, [e: React.ChangeEvent<HTMLInputElement>]>;
export declare const createOptionsMetadata: (options: string[], labels?: string[], tooltips?: string[]) => {
    option_tooltips?: string[] | undefined;
    option_labels?: string[] | undefined;
    options: string[];
};
export declare const createRepeatOptionsMetadata: (repeatOptions: any[]) => {
    repeat_options: any[][];
};
export declare const createMaxLengthElement: (maxLength: number, options?: string[]) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const createOtherOptionElement: (options?: string[], otherLabel?: string, otherTooltip?: string) => {
    id: string;
    servar: any;
    properties: any;
    styles: any;
    repeat: boolean;
};
export declare const getCheckboxInputs: () => HTMLInputElement[];
export declare const getCheckboxInput: (index: number) => HTMLInputElement;
export declare const getCheckboxInputByValue: (value: string) => HTMLInputElement;
export declare const getOtherCheckbox: () => HTMLInputElement;
export declare const getOtherTextInput: () => HTMLInputElement | null;
export declare const getOptionLabels: () => string[];
export declare const getOptionLabel: (index: number) => string;
export declare const getOptionTooltip: (value: string) => string;
export declare const getOtherTooltip: () => string;
export declare const expectCheckboxToBeChecked: (value: string) => void;
export declare const expectCheckboxToBeUnchecked: (value: string) => void;
export declare const expectOtherCheckboxToBeChecked: () => void;
export declare const expectOtherCheckboxToBeUnchecked: () => void;
export declare const expectCheckboxGroupToHaveValues: (values: string[]) => void;
export declare const expectCheckboxGroupToHaveOptionCount: (count: number) => void;
export declare const expectCheckboxToBeDisabled: (value: string) => void;
export declare const expectCheckboxToBeEnabled: (value: string) => void;
export declare const expectOtherCheckboxToBeDisabled: () => void;
export declare const expectOtherCheckboxToBeEnabled: () => void;
export declare const expectOtherTextInputToBeDisabled: () => void;
export declare const expectOtherTextInputToBeEnabled: () => void;
export declare const expectOtherTextInputToHaveValue: (value: string) => void;
export declare const expectOptionToHaveTooltip: (value: string, tooltip: string) => void;
export declare const expectOtherToHaveTooltip: (tooltip: string) => void;
//# sourceMappingURL=test-utils.d.ts.map