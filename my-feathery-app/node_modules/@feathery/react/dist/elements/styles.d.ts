import { CSSProperties } from 'react';
export declare const DEFAULT_MOBILE_BREAKPOINT = 478;
export declare const getViewport: (breakpoint?: number) => "desktop" | "mobile";
export declare const borderWidthProps: string[];
export declare const borderColorProps: string[];
/**
 * Handles the translation of server-side properties into responsive CSS
 * attributes
 */
export default class ResponsiveStyles {
    element: any;
    handleMobile: boolean;
    mobileStyles: any;
    mobileTargets: any;
    styles: any;
    targets: any;
    mobileBreakpoint: number;
    mobileBreakpointKey: string;
    constructor(element: any, targets: string[], handleMobile?: boolean, mobileBreakpoint?: number);
    getMobileBreakpoint(): number;
    setMobileBreakpoint(breakpoint: number): void;
    addTargets(...targets: string[]): void;
    getTarget(targetId: string, desktopOnly?: boolean, includeMobile?: boolean): any;
    getTargets(...targets: string[]): {};
    setStyle(target: string, key: string, val: any): void;
    apply(target: string, properties: any, get: any): void;
    applyFlexDirection(target: string, prefix?: string): void;
    applyContentAlign(target: string, prefix?: string): void;
    applyTextAlign(target: string, prefix?: string): void;
    applyBorders({ target, prefix, important }: {
        target?: string | undefined;
        prefix?: string | undefined;
        important?: boolean | undefined;
    }): boolean;
    applySelectorStyles(target: string, { prefix, important, addBorder, background }: {
        prefix?: string | undefined;
        important?: boolean | undefined;
        addBorder?: boolean | undefined;
        background?: boolean | undefined;
    }): void;
    applyPadding(target: string, prefix?: string, margin?: boolean): void;
    applyMargin(target: string, prefix?: string): void;
    applyCorners(target: string): void;
    applyBoxShadow(target: string): void;
    applyHeight(target: string, prefix?: string, force?: boolean): void;
    applyWidth(target: string, prefix?: string, force?: boolean): void;
    applyColor(target: string, jsonProp: any, cssProp: any, important?: boolean): void;
    applyFontStyles(target: string, placeholder?: boolean, ignoreSelectorFontColor?: boolean): void;
    applySpanSelectorStyles(target: string, prefix?: string): void;
    transformFontFamilies(families: string): string;
    applyFontFamily(target: string): void;
    getRichFontStyles(attrs: any): Record<string, any>;
    _getRichFontScreenStyles(attrs: any, isMobile?: boolean): Record<string, any>;
    applyPlaceholderStyles(type: any, styles: any): void;
    applyBackgroundColorGradient(target: string): void;
    applyBackgroundImageStyles(target: string): void;
}
export declare const noTextSelectStyles: CSSProperties;
export declare const resetStyles: CSSProperties;
export declare const imgMaxSizeStyles: CSSProperties;
export declare const ERROR_COLOR = "#F42525";
export declare function mergeMobileStyles(style1: any, style2: any, breakpoint?: number): {
    [x: string]: {};
};
//# sourceMappingURL=styles.d.ts.map